@import "./testhelper.scss";

$dfr-config: (
  "spacing": (
    "padding": "p",
    "margin": "m",
    "directions": (
      "l",
      "r",
      "t",
      "b",
      "x",
      "y",
    ),
    "maxDepth": 5,
    "spacer": 10px,
  ),
  "heading": (
    "font": (
      "weight": 500,
      "size": (
        10px,
        20px,
        30px,
        40px,
        50px,
      ),
    ),
    "margin": (
      "bottom": 22px,
    ),
  ),
);
@function get($key, $map: $dfr-config) {
  $keys: str-explode($key, ".");

  @if not deep-map-check($map, $keys...) {
    @error 'The argument $map: `#{$map}` doesn\'t has some of the $keys: `#{$keys}`!';
  }

  @return deep-map-get($map, $keys...);
}

@function getSpacingKeys($i) {
  $keys: ();

  $keys: append($keys, get("spacing.padding"));
  @each $key in get("spacing.directions") {
    $keys: append($keys, get("spacing.padding") + #{$key});
  }

  $keys: append($keys, get("spacing.margin"));
  @each $key in get("spacing.directions") {
    $keys: append($keys, get("spacing.margin") + #{$key});
  }
  @return $keys;
}

@function getSpacingValue($i) {
  @return $i * get("spacing.spacer");
}

@mixin getSpacing($key, $i) {
  @if str-length($key) < 1 {
    @debug "key length too small `#{$keys}`!";
  }

  $spacingKey: str-slice($key, 1, 1);
  $directionKey: str-slice($key, 2, 2);

  @if str-length($key) ==1 {
    @if $spacingKey== "p" {
      padding: getSpacingValue($i);
    } @else if $spacingKey == "m" {
      margin: getSpacingValue($i);
    }
  } @else if $directionKey == "l" {
    @if $spacingKey== "p" {
      padding-left: getSpacingValue($i);
    } @else if $spacingKey == "m" {
      margin-left: getSpacingValue($i);
    }
  } @else if $directionKey == "r" {
    @if $spacingKey== "p" {
      padding-right: getSpacingValue($i);
    } @else if $spacingKey == "m" {
      margin-right: getSpacingValue($i);
    }
  } @else if $directionKey == "t" {
    @if $spacingKey== "p" {
      padding-top: getSpacingValue($i);
    } @else if $spacingKey == "m" {
      margin-top: getSpacingValue($i);
    }
  } @else if $directionKey == "b" {
    @if $spacingKey== "p" {
      padding-bottom: getSpacingValue($i);
    } @else if $spacingKey == "m" {
      margin-bottom: getSpacingValue($i);
    }
  } @else if $directionKey == "y" {
    @if $spacingKey== "p" {
      padding-top: getSpacingValue($i);
      padding-bottom: getSpacingValue($i);
    } @else if $spacingKey == "m" {
      margin-top: getSpacingValue($i);
      margin-bottom: getSpacingValue($i);
    }
  } @else if $directionKey == "x" {
    @if $spacingKey== "p" {
      padding-right: getSpacingValue($i);
      padding-left: getSpacingValue($i);
    } @else if $spacingKey == "m" {
      margin-right: getSpacingValue($i);
      margin-left: getSpacingValue($i);
    }
  }
}

@for $i from 0 through get("spacing.maxDepth") {
  $keys: getSpacingKeys($i);

  @each $key in $keys {
    .#{$key}_#{$i} {
      @include getSpacing($key, $i);
    }
  }
}

//%heading-common {
//    font-weight: get("heading.font.weight");
//    margin-bottom: get("heading.margin.bottom");
//  }
// @each $size in get("heading.font.size") {
//  $index: index(get("heading.font.size"), $size);
//  h-#{$index} {
//    @extend %heading-common;
//    font-size: $size;
//  }
//}
