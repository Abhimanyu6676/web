{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\react\\\\Website\\\\web\\\\.cache\\\\app.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport domReady from \"@mikaelkristiansson/domready\";\nimport io from \"socket.io-client\";\nimport socketIo from \"./socketIo\";\nimport emitter from \"./emitter\";\nimport { apiRunner, apiRunnerAsync } from \"./api-runner-browser\";\nimport { setLoader, publicLoader } from \"./loader\";\nimport DevLoader from \"./dev-loader\";\nimport syncRequires from \"$virtual/sync-requires\";\nimport matchPaths from \"$virtual/match-paths.json\";\n\nif (process.env.GATSBY_HOT_LOADER === \"fast-refresh\" && module.hot) {\n  module.hot.accept(\"$virtual/sync-requires\", function () {});\n}\n\nwindow.___emitter = emitter;\nvar loader = new DevLoader(syncRequires, matchPaths);\nsetLoader(loader);\nloader.setApiRunner(apiRunner);\nwindow.___loader = publicLoader;\nimport(\"./dummy\");\napiRunnerAsync(\"onClientEntry\").then(function () {\n  var socket = socketIo();\n\n  if (socket) {\n    socket.on(\"reload\", function () {\n      window.location.reload();\n    });\n  }\n\n  fetch(\"/___services\").then(function (res) {\n    return res.json();\n  }).then(function (services) {\n    if (services.developstatusserver) {\n      var isRestarting = false;\n      var parentSocket = io(window.location.protocol + \"//\" + window.location.hostname + \":\" + services.developstatusserver.port);\n      parentSocket.on(\"structured-log\", function (msg) {\n        if (!isRestarting && msg.type === \"LOG_ACTION\" && msg.action.type === \"DEVELOP\" && msg.action.payload === \"RESTART_REQUIRED\" && window.confirm(\"The develop process needs to be restarted for the changes to \" + msg.action.dirtyFile + \" to be applied.\\nDo you want to restart the develop process now?\")) {\n          isRestarting = true;\n          parentSocket.emit(\"develop:restart\", function () {\n            window.location.reload();\n          });\n        }\n\n        if (isRestarting && msg.type === \"LOG_ACTION\" && msg.action.type === \"SET_STATUS\" && msg.action.payload === \"SUCCESS\") {\n          isRestarting = false;\n          window.location.reload();\n        }\n      });\n      parentSocket.on(\"disconnect\", function () {\n        console.warn(\"[socket.io] Disconnected. Unable to perform health-check.\");\n        parentSocket.close();\n      });\n    }\n  });\n\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.getRegistrations().then(function (registrations) {\n      if (registrations.length > 0) console.warn(\"Warning: found one or more service workers present.\", \"If your site isn't behaving as expected, you might want to remove these.\", registrations);\n    });\n  }\n\n  var rootElement = document.getElementById(\"___gatsby\");\n  var renderer = apiRunner(\"replaceHydrateFunction\", undefined, ReactDOM.render)[0];\n  Promise.all([loader.loadPage(\"/dev-404-page/\"), loader.loadPage(\"/404.html\"), loader.loadPage(window.location.pathname)]).then(function () {\n    var preferDefault = function preferDefault(m) {\n      return m && m.default || m;\n    };\n\n    var Root = preferDefault(require(\"./root\"));\n    domReady(function () {\n      renderer(React.createElement(Root, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 16\n        }\n      }), rootElement, function () {\n        apiRunner(\"onInitialClientRender\");\n      });\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/admin/react/Website/web/.cache/app.js"],"names":["React","ReactDOM","domReady","io","socketIo","emitter","apiRunner","apiRunnerAsync","setLoader","publicLoader","DevLoader","syncRequires","matchPaths","process","env","GATSBY_HOT_LOADER","module","hot","accept","window","___emitter","loader","setApiRunner","___loader","then","socket","on","location","reload","fetch","res","json","services","developstatusserver","isRestarting","parentSocket","protocol","hostname","port","msg","type","action","payload","confirm","dirtyFile","emit","console","warn","close","navigator","serviceWorker","getRegistrations","registrations","length","rootElement","document","getElementById","renderer","undefined","render","Promise","all","loadPage","pathname","preferDefault","m","default","Root","require"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport domReady from \"@mikaelkristiansson/domready\"\nimport io from \"socket.io-client\"\n\nimport socketIo from \"./socketIo\"\nimport emitter from \"./emitter\"\nimport { apiRunner, apiRunnerAsync } from \"./api-runner-browser\"\nimport { setLoader, publicLoader } from \"./loader\"\nimport DevLoader from \"./dev-loader\"\nimport syncRequires from \"$virtual/sync-requires\"\n// Generated during bootstrap\nimport matchPaths from \"$virtual/match-paths.json\"\n\nif (process.env.GATSBY_HOT_LOADER === `fast-refresh` && module.hot) {\n  module.hot.accept(`$virtual/sync-requires`, () => {\n    // Manually reload\n  })\n}\n\nwindow.___emitter = emitter\n\nconst loader = new DevLoader(syncRequires, matchPaths)\nsetLoader(loader)\nloader.setApiRunner(apiRunner)\n\nwindow.___loader = publicLoader\n\n// Do dummy dynamic import so the jsonp __webpack_require__.e is added to the commons.js\n// bundle. This ensures hot reloading doesn't break when someone first adds\n// a dynamic import.\n//\n// Without this, the runtime breaks with a\n// \"TypeError: __webpack_require__.e is not a function\"\n// error.\n// eslint-disable-next-line\nimport(\"./dummy\")\n\n// Let the site/plugins run code very early.\napiRunnerAsync(`onClientEntry`).then(() => {\n  // Hook up the client to socket.io on server\n  const socket = socketIo()\n  if (socket) {\n    socket.on(`reload`, () => {\n      window.location.reload()\n    })\n  }\n\n  fetch(`/___services`)\n    .then(res => res.json())\n    .then(services => {\n      if (services.developstatusserver) {\n        let isRestarting = false\n        const parentSocket = io(\n          `${window.location.protocol}//${window.location.hostname}:${services.developstatusserver.port}`\n        )\n\n        parentSocket.on(`structured-log`, msg => {\n          if (\n            !isRestarting &&\n            msg.type === `LOG_ACTION` &&\n            msg.action.type === `DEVELOP` &&\n            msg.action.payload === `RESTART_REQUIRED` &&\n            window.confirm(\n              `The develop process needs to be restarted for the changes to ${msg.action.dirtyFile} to be applied.\\nDo you want to restart the develop process now?`\n            )\n          ) {\n            isRestarting = true\n            parentSocket.emit(`develop:restart`, () => {\n              window.location.reload()\n            })\n          }\n\n          if (\n            isRestarting &&\n            msg.type === `LOG_ACTION` &&\n            msg.action.type === `SET_STATUS` &&\n            msg.action.payload === `SUCCESS`\n          ) {\n            isRestarting = false\n            window.location.reload()\n          }\n        })\n\n        // Prevents certain browsers spamming XHR 'ERR_CONNECTION_REFUSED'\n        // errors within the console, such as when exiting the develop process.\n        parentSocket.on(`disconnect`, () => {\n          console.warn(\n            `[socket.io] Disconnected. Unable to perform health-check.`\n          )\n          parentSocket.close()\n        })\n      }\n    })\n\n  /**\n   * Service Workers are persistent by nature. They stick around,\n   * serving a cached version of the site if they aren't removed.\n   * This is especially frustrating when you need to test the\n   * production build on your local machine.\n   *\n   * Let's warn if we find service workers in development.\n   */\n  if (`serviceWorker` in navigator) {\n    navigator.serviceWorker.getRegistrations().then(registrations => {\n      if (registrations.length > 0)\n        console.warn(\n          `Warning: found one or more service workers present.`,\n          `If your site isn't behaving as expected, you might want to remove these.`,\n          registrations\n        )\n    })\n  }\n\n  const rootElement = document.getElementById(`___gatsby`)\n\n  const renderer = apiRunner(\n    `replaceHydrateFunction`,\n    undefined,\n    // TODO replace with hydrate once dev SSR is ready\n    // but only for SSRed pages.\n    ReactDOM.render\n  )[0]\n\n  Promise.all([\n    loader.loadPage(`/dev-404-page/`),\n    loader.loadPage(`/404.html`),\n    loader.loadPage(window.location.pathname),\n  ]).then(() => {\n    const preferDefault = m => (m && m.default) || m\n    const Root = preferDefault(require(`./root`))\n    domReady(() => {\n      renderer(<Root />, rootElement, () => {\n        apiRunner(`onInitialClientRender`)\n      })\n    })\n  })\n})\n"]},"metadata":{},"sourceType":"module"}