{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\react\\\\Website\\\\web\\\\src\\\\components\\\\screens\\\\homePage\\\\section2\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useStaticQuery } from 'gatsby';\nimport styles from \"./index.module.scss\";\nexport default _s(function (props) {\n  _s();\n\n  var thumbnailRef = useRef();\n  var sliderRef = useRef();\n\n  var _useState = useState(0),\n      width = _useState[0],\n      setWidth = _useState[1];\n\n  var _useState2 = useState(0),\n      left = _useState2[0],\n      setLeft = _useState2[1];\n\n  var data = useStaticQuery(\"2296412114\");\n\n  var slideImage = function slideImage(direction) {\n    switch (direction) {\n      case \"next\":\n        if (left <= 7) setLeft(left + 1);\n        break;\n\n      case \"pre\":\n        if (left > 0) setLeft(left - 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  console.log(\">>>>><<<<<<<\");\n  console.log(\">>>>><<<<<<<\" + data.allFile.edges.length);\n  return React.createElement(Container, _defineProperty({\n    fluid: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"__self\", _this), React.createElement(Row, _defineProperty({\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"__self\", _this), React.createElement(Col, _defineProperty({\n    sm: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"__self\", _this), React.createElement(Row, _defineProperty({\n    className: styles.ImageSliderContainer + \" \",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"__self\", _this), React.createElement(Col, _defineProperty({\n    sm: 2,\n    className: styles.thumbnailsCol + \" -bg-fff- p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, \"__self\", _this), React.createElement(\"div\", _defineProperty({\n    className: \"-bg-fff- d-flex -jus-c--md-up- \" + styles.thumbnailContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }, \"__self\", _this), React.createElement(\"div\", _defineProperty({\n    ref: thumbnailRef,\n    className: \"-bg-fff- d-flex flex-md-column position-relative \",\n    style: {\n      position: \"absolute\",\n      transition: \"top 1s , left 1s\",\n      top: \"-\" + function () {\n        var getCurrentSlideTopOffset = function getCurrentSlideTopOffset(slide) {\n          var top = 0;\n          if (slide <= 0) return top;else {\n            top = slide * 70;\n          }\n          return top;\n        };\n\n        if (Dimensions.get(\"window\").width <= 576 || left <= 0) return 0;\n        var totalSlides = 8;\n        var ScrollViewHeight = totalSlides * 70;\n\n        if (thumbnailRef.current && ScrollViewHeight > thumbnailRef.current.offsetHeight) {\n          var viewHeight = thumbnailRef.current.offsetHeight;\n          var currSlideTop = getCurrentSlideTopOffset(left);\n          var currSlideBottom = getCurrentSlideTopOffset(left) + 70;\n          var desiredMoveOffset = currSlideBottom + (viewHeight / 2 - 35);\n\n          if (currSlideBottom > viewHeight / 2) {\n            var move = (left - viewHeight / 2 / 70) * 70;\n            if (move > 0 && move <= ScrollViewHeight - viewHeight) return move;else if (move > ScrollViewHeight - viewHeight) return ScrollViewHeight - viewHeight;\n          }\n        }\n\n        return 0;\n      }() + \"px\",\n      left: \"-\" + function () {\n        var getCurrentSlideTopOffset = function getCurrentSlideTopOffset(slide) {\n          var top = 0;\n          if (slide <= 0) return top;else {\n            top = slide * 70;\n          }\n          return top;\n        };\n\n        if (Dimensions.get(\"window\").width > 576 || left <= 0) return 0;\n        var totalSlides = 8;\n        var ScrollViewHeight = totalSlides * 70;\n        var viewWidth = Dimensions.get(\"window\").width;\n        console.log(\"calculating offset >> \" + viewWidth);\n\n        if (thumbnailRef.current && ScrollViewHeight > viewWidth) {\n          var currSlideLeft = getCurrentSlideTopOffset(left);\n          var currSlideRight = getCurrentSlideTopOffset(left) + 70;\n          var desiredMoveOffset = currSlideRight + (viewWidth / 2 - 35);\n\n          if (currSlideRight > viewWidth / 2) {\n            var move = (left - viewWidth / 2 / 70) * 70;\n            if (move > 0 && move <= ScrollViewHeight - viewWidth) return move;else if (move > ScrollViewHeight - viewWidth) return ScrollViewHeight - viewWidth;\n          }\n        }\n\n        return 0;\n      }() + \"px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 33\n    }\n  }, \"__self\", _this), [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"].map(function () {\n    return React.createElement(\"div\", _defineProperty({\n      className: \"-my-10- -mx-10-\",\n      style: {\n        minHeight: 50,\n        minWidth: 50,\n        backgroundColor: \"blue\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 45\n      }\n    }, \"__self\", _this));\n  })), React.createElement(\"div\", _defineProperty({\n    className: styles.thumbnailArrow + \" \" + styles.thumbnailDown + \" \" + styles.thumbnailRight,\n    onClick: function onClick() {\n      slideImage(\"next\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 33\n    }\n  }, \"__self\", _this)), React.createElement(\"div\", _defineProperty({\n    className: styles.thumbnailArrow + \" \" + styles.thumbnailUp + \" \" + styles.thumbnailLeft,\n    onClick: function onClick() {\n      slideImage(\"pre\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 33\n    }\n  }, \"__self\", _this)))), React.createElement(Col, _defineProperty({\n    sm: 10,\n    style: {\n      overflow: \"hidden\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }, \"__self\", _this), React.createElement(\"div\", _defineProperty({\n    ref: sliderRef,\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"red\",\n      position: \"absolute\",\n      top: 0,\n      left: \"-\" + left * 100 + \"%\",\n      transition: \"left 1s\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 29\n    }\n  }, \"__self\", _this), React.createElement(\"h1\", _defineProperty({\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 33\n    }\n  }, \"__self\", _this), width))))), React.createElement(Col, _defineProperty({\n    sm: true,\n    style: {\n      backgroundColor: \"green\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"__self\", _this), \"Image Slider\")));\n}, \"vxUjqWcqMgNVlWPvc/ztgb0N7YU=\", false, function () {\n  return [useStaticQuery];\n});","map":{"version":3,"sources":["C:/Users/admin/react/Website/web/src/components/screens/homePage/section2/index.tsx"],"names":["thumbnailRef","useRef","sliderRef","width","setWidth","useState","left","setLeft","data","useStaticQuery","slideImage","console","styles","position","transition","top","getCurrentSlideTopOffset","slide","Dimensions","totalSlides","ScrollViewHeight","viewHeight","currSlideTop","currSlideBottom","desiredMoveOffset","move","viewWidth","currSlideLeft","currSlideRight","minHeight","minWidth","backgroundColor","overflow","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useState } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Dimensions } from 'react-native';\r\nimport { graphql, useStaticQuery } from 'gatsby'\r\nimport styles from \"./index.module.scss\";\r\n\r\n\r\n\r\ninterface Props { }\r\nexport default (props: Props) => {\r\n    const thumbnailRef = useRef()\r\n    const sliderRef = useRef()\r\n    const [width, setWidth] = useState(0)\r\n    const [left, setLeft] = useState(0)\r\n\r\n    const data = useStaticQuery(graphql`\r\nquery AssetsPhotos {\r\n    allFile(filter: {extension: {regex: \"/(jpg)|(jpeg)|(png)/\"}, dir: {eq: \"C:/Users/admin/react/Website/web/src/images/Products/Strips/aurora_strip\"}}) {\r\n      edges {\r\n        node {\r\n          id\r\n          childImageSharp {\r\n            fluid(maxWidth: 300) {\r\n              originalImg\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }`)\r\n\r\n    const slideImage = (direction: \"next\" | \"pre\") => {\r\n        switch (direction) {\r\n            case \"next\":\r\n                if (left <= 7)\r\n                    setLeft(left + 1)\r\n                break\r\n\r\n            case \"pre\":\r\n                if (left > 0)\r\n                    setLeft(left - 1)\r\n                break\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    console.log(\">>>>><<<<<<<\")\r\n    console.log(\">>>>><<<<<<<\" + data.allFile.edges.length)\r\n\r\n    return (\r\n        <Container fluid >\r\n            <Row>\r\n                {/* product Image slider and thumbnails */}\r\n                <Col sm >\r\n                    <Row className={styles.ImageSliderContainer + \" \"}>\r\n                        <Col sm={2} className={styles.thumbnailsCol + \" -bg-fff- p-0\"} >\r\n                            <div className={\"-bg-fff- d-flex -jus-c--md-up- \" + styles.thumbnailContainer}>\r\n                                <div\r\n                                    ref={thumbnailRef}\r\n                                    className={\"-bg-fff- d-flex flex-md-column position-relative \"}\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        transition: \"top 1s , left 1s\",\r\n                                        top: `-${(() => {\r\n                                            const getCurrentSlideTopOffset = (slide: number) => {\r\n                                                let top = 0\r\n                                                if (slide <= 0)\r\n                                                    return top\r\n                                                else {\r\n                                                    top = (slide * 70)\r\n                                                }\r\n                                                return top\r\n                                            }\r\n                                            if (Dimensions.get(\"window\").width <= 576 || left <= 0)\r\n                                                return 0\r\n                                            const totalSlides = 8\r\n                                            const ScrollViewHeight = totalSlides * 70\r\n                                            if (thumbnailRef.current && ScrollViewHeight > thumbnailRef.current.offsetHeight) {\r\n                                                const viewHeight = thumbnailRef.current.offsetHeight\r\n                                                const currSlideTop = getCurrentSlideTopOffset(left)\r\n                                                const currSlideBottom = getCurrentSlideTopOffset(left) + 70\r\n                                                const desiredMoveOffset = currSlideBottom + ((viewHeight / 2) - 35)\r\n                                                if (currSlideBottom > (viewHeight / 2)) {\r\n                                                    const move = ((left - ((viewHeight / 2) / 70)) * 70)\r\n                                                    if (move > 0 && move <= (ScrollViewHeight - viewHeight))\r\n                                                        return move\r\n                                                    else if (move > (ScrollViewHeight - viewHeight))\r\n                                                        return ScrollViewHeight - viewHeight\r\n                                                }\r\n                                            }\r\n                                            return 0\r\n                                        })()}px`,\r\n                                        left: `-${(() => {\r\n                                            const getCurrentSlideTopOffset = (slide: number) => {\r\n                                                let top = 0\r\n                                                if (slide <= 0)\r\n                                                    return top\r\n                                                else {\r\n                                                    top = (slide * 70)\r\n                                                }\r\n                                                return top\r\n                                            }\r\n                                            if (Dimensions.get(\"window\").width > 576 || left <= 0)\r\n                                                return 0\r\n                                            const totalSlides = 8\r\n                                            const ScrollViewHeight = totalSlides * 70\r\n                                            const viewWidth = Dimensions.get(\"window\").width\r\n                                            console.log(\"calculating offset >> \" + viewWidth)\r\n                                            if (thumbnailRef.current && ScrollViewHeight > viewWidth) {\r\n                                                const currSlideLeft = getCurrentSlideTopOffset(left)\r\n                                                const currSlideRight = getCurrentSlideTopOffset(left) + 70\r\n                                                const desiredMoveOffset = currSlideRight + ((viewWidth / 2) - 35)\r\n                                                if (currSlideRight > (viewWidth / 2)) {\r\n                                                    const move = ((left - ((viewWidth / 2) / 70)) * 70)\r\n                                                    if (move > 0 && move <= (ScrollViewHeight - viewWidth))\r\n                                                        return move\r\n                                                    else if (move > (ScrollViewHeight - viewWidth))\r\n                                                        return ScrollViewHeight - viewWidth\r\n                                                }\r\n                                            }\r\n                                            return 0\r\n                                        })()}px`,\r\n                                    }}>\r\n                                    {[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"].map(() => {\r\n                                        return (\r\n                                            <div className=\"-my-10- -mx-10-\" style={{ minHeight: 50, minWidth: 50, backgroundColor: \"blue\" }}></div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                                <div className={styles.thumbnailArrow + \" \" + styles.thumbnailDown + \" \" + styles.thumbnailRight} onClick={() => { slideImage(\"next\") }}></div>\r\n                                <div className={styles.thumbnailArrow + \" \" + styles.thumbnailUp + \" \" + styles.thumbnailLeft} onClick={() => { slideImage(\"pre\") }}></div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col sm={10} style={{ overflow: \"hidden\" }}>\r\n                            <div\r\n                                ref={sliderRef}\r\n                                style={{\r\n                                    height: \"100%\",\r\n                                    width: \"100%\",\r\n                                    backgroundColor: \"red\",\r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    left: `-${left * 100}%`,\r\n                                    transition: \"left 1s\",\r\n                                }}\r\n                            >\r\n                                <h1>{width}</h1>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                {/* Product infod accordion */}\r\n                <Col sm style={{ backgroundColor: \"green\" }}>\r\n                    Image Slider\r\n                </Col>\r\n            </Row>\r\n        </Container >\r\n    )\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}